# Use Maven 3.5 and JDK8
image: maven:3.5-jdk-8

stages:
  - build
  - test
  - package
  - deploy

variables:
  APPLICATION_PREFIX: "darren-api"
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
  APPLICATION_NAME: "darren-app"
  DOMAIN_INTERNAL: "ttrain-darren-app.tsc.sh"
  ECR_IMAGE: "docker.signintra.com/docker/ecr:1.0.5"
  REPO_URL_NON_PROD: "194003346478.dkr.ecr.eu-central-1.amazonaws.com/ttrain-trainees"

cache:
  paths:
    - .m2/repository

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
compile:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# Run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
verify:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
    - 'mvn $MAVEN_CLI_OPTS -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=https://sonar.signintra.com/ -D sonar.java.binaries=./target/classes -Dsonar.java.test.binaries=./target/test-classes sonar:sonar'
  artifacts:
    paths:
    - target/*.jar
    - Dockerfile

package:
  image: $ECR_IMAGE
  stage: package
  ## no need to manager cache
  cache: {}
  ## we have alle we need from the artifact coordinator
  variables:
    GIT_STRATEGY: "none"
  script:
  ## attention: we use the application name in the tag to share a traineed repo
    - docker build --pull -t $REPO_URL_NON_PROD:${APPLICATION_NAME}-latest .
    - docker push $REPO_URL_NON_PROD:${APPLICATION_NAME}-latest
  except:
    - tags
  only:
    - master



## shared deployment script to interact with kubernets
.kubernetes_deploy_script: &kubernetes_deploy_script
  image: $ECR_IMAGE
  stage: deploy
  cache: {}
  script:
    - timeout -t 120 deployment/deploy.sh

## stage specific environment vartiables
.dev_variables: &dev_variables
  IMAGEURL: "$REPO_URL_NON_PROD:${APPLICATION_NAME}-latest"
  ENV: dev
  KUBECONFIG_CONTENT: $KUBECONFIG_SANDBOX
  KUBECONFIG: /tmp/koffer
  KUBE_NAMESPACE: ttrain
  REPLICAS: 1


## stage specific environment vartiables
.int_variables: &int_variables
  IMAGEURL: "$REPO_URL_NON_PROD:${APPLICATION_NAME}-latest"
  ENV: int
  KUBECONFIG_CONTENT: $KUBECONFIG_SANDBOX
  KUBECONFIG: /tmp/koffer
  KUBE_NAMESPACE: ttrain-int
  REPLICAS: 2

## carry out dev delpoyment
deploy-dev:
  stage: deploy
  environment:
    name: dev
    url: $DOMAIN_INTERNAL
  <<: *kubernetes_deploy_script
  variables:
    <<: *dev_variables
  only:
    - master
  #when: manual

## carry out dev delpoyment
deploy-int:
  stage: deploy
  environment:
    name: int
    url: $DOMAIN_INTERNAL
  <<: *kubernetes_deploy_script
  variables:
    <<: *int_variables
  only:
    - master
  when: manual

